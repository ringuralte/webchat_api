{"version":3,"file":"static/webpack/static/development/pages/p/[id].js.cfaa8065f51a071d3e52.hot-update.js","sources":["webpack:///./pages/p/.js"],"sourcesContent":["// !Need to use allChats from the Store and not a react state\nimport React from \"react\";\nimport Router from \"next/router\";\n\nimport Loading from \"../../components/Loading\"\nimport Layout from \"../../components/Layout\";\nimport Textbox from \"../../components/Textbox\";\nimport { storeCTX } from \"../../components/Store\";\n\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\n\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Cookies from \"js-cookie\";\n\nimport fetch from \"isomorphic-unfetch\";\nimport { Typography } from \"@material-ui/core\";\n\nconst useStyles = makeStyles(theme =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      flexGrow: 1,\n      paddingBottom: 50,\n    },\n    chatContainer: {\n      padding: \"1rem\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      minHeight: \"85vh\",\n      background: \"#292d3e\"\n    },\n    chatItems: {\n      paddingLeft: 0,\n      paddingRight: \"25vw\",\n      color: \"#ffcb6b\"\n    },\n    chatItemsUser: {\n      paddingLeft: \"25vw\",\n      paddingRight: 0,\n      textAlign: \"right\",\n      color: \"#84ffff\"\n    },\n    senderName: {\n      color: \"#f07178\"\n    },\n    chat: {\n      flexGrow: 1\n    },\n    text: {\n      padding: theme.spacing(2, 2, 0)\n    }\n  })\n);\n\nconst ChatRooms = () => {\n  const classes = useStyles();\n  const { allChats, dispatch, topic, setTopic} = React.useContext(storeCTX);\n  // const [loggedInStatus, setLoggedInStatus] = React.useState(false);\n  const user = Cookies.get(\"user\");\n  const scrollRef = React.useRef(null);\n  const [isLoading, setIsLoading] = React.useState(true)\n\n  //!TODO the pages load to scroll bottom even when there is not enough\n  //chat items and since the container have min-height of 100vh\n\n  const scrollViewOnSend = () => {\n    scrollRef.current.scrollIntoView();\n  };\n\n  const scrollViewOnLoad = () => {\n    scrollRef.current.scrollIntoView();\n  };\n\n  //when component mounts\n  React.useEffect(scrollViewOnLoad);\n\n  //when component is updated\n  React.useEffect(scrollViewOnSend, [allChats]);\n\n  //ran when going to a new group by clicking on header topics\n  React.useEffect(() => {\n    fetch(\n      `/api/getChats/${window.localStorage.getItem(\n        \"topic\"\n      )}`,\n      {\n        credentials: \"include\"\n      }\n    )\n      .then(res => res.json())\n      .then(json=> {\n        if (json.code === 200) {\n          dispatch({ type: \"FETCH MESSAGE\", payload: json.chats});\n          setIsLoading(false);\n        } else {\n          setTopic(\"\")\n          Router.push(\"/signin\");\n        }\n      });\n  }, [topic]);\n\n  let chats;\n\n  if (!isLoading) {\n    chats = (\n      // user chats goes right aligned\n      <React.Fragment>\n        <List className={classes.chatContainer}>\n          {Object.keys(allChats).map(key => {\n            if (user === allChats[key].sender) {\n              return (\n                <ListItem\n                  className={classes.chatItemsUser}\n                  key={allChats[key].id}\n                >\n                  <ListItemText primary={`${allChats[key].msg}`} />\n                </ListItem>\n              );\n            } else {\n              // other users appear on left\n              return (\n                <ListItem className={classes.chatItems} key={allChats[key].id}>\n                  <ListItemText\n                    primary={\n                      <React.Fragment>\n                        <Typography\n                          className={classes.senderName}\n                          component=\"span\"\n                        >\n                          {`${allChats[key].sender}` + ` : `}\n                        </Typography>\n                        <Typography component=\"span\">{`${allChats[key].msg}`}</Typography>\n                      </React.Fragment>\n                    }\n                  />\n                </ListItem>\n              );\n            }\n          })}\n        </List>\n      </React.Fragment>\n    );\n  } else {\n    chats = <Loading />;\n  }\n\n  return (\n    <React.Fragment>\n      <Layout>\n        <div className={classes.root}>\n          {chats}\n          {/* ref is for auto scroll to bottom for send and load */}\n          <div ref={scrollRef} />\n          <Textbox />\n        </div>\n      </Layout>\n    </React.Fragment>\n  );\n};\n\nexport default ChatRooms;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AA/BA;AADA;AACA;AAqCA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAKA;AADA;AAIA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;;;;A","sourceRoot":""}